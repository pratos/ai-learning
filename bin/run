#!/bin/bash

# AI Learning - Docker Runtime (uv-powered)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Enable Docker Bake for better build performance
export COMPOSE_BAKE=true

echo -e "${BLUE}üê≥ AI Learning - Docker Runtime (uv-powered)${NC}"
echo "============================================="

# Function to detect Linux distribution
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo $ID
    elif [ -f /etc/redhat-release ]; then
        echo "rhel"
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    else
        echo "unknown"
    fi
}

# Function to install Docker
install_docker() {
    echo -e "${YELLOW}üîß Installing Docker...${NC}"
    
    local distro=$(detect_distro)
    
    case $distro in
        "ubuntu"|"debian")
            # Update package index
            sudo apt-get update
            
            # Install required packages
            sudo apt-get install -y \
                ca-certificates \
                curl \
                gnupg \
                lsb-release
            
            # Add Docker's official GPG key
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/$distro/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            
            # Set up the repository
            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$distro \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # Update package index again
            sudo apt-get update
            
            # Install Docker Engine
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            # Add user to docker group
            sudo usermod -aG docker $USER
            
            echo -e "${GREEN}‚úÖ Docker installed successfully${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  Please log out and log back in for group changes to take effect${NC}"
            ;;
        "rhel"|"centos"|"fedora")
            # Install using yum/dnf
            if command -v dnf &> /dev/null; then
                PKG_MGR="dnf"
            else
                PKG_MGR="yum"
            fi
            
            sudo $PKG_MGR install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo $PKG_MGR install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            # Start and enable Docker
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Add user to docker group
            sudo usermod -aG docker $USER
            
            echo -e "${GREEN}‚úÖ Docker installed successfully${NC}"
            ;;
        *)
            echo -e "${RED}‚ùå Unsupported distribution: $distro${NC}"
            echo "Please install Docker manually: https://docs.docker.com/engine/install/"
            exit 1
            ;;
    esac
}

# Function to install Docker Compose standalone
install_docker_compose() {
    echo -e "${YELLOW}üîß Installing Docker Compose...${NC}"
    
    # Get latest version
    local compose_version=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
    
    if [ -z "$compose_version" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Could not detect latest version, using v2.27.0${NC}"
        compose_version="v2.27.0"
    fi
    
    # Download and install
    sudo curl -L "https://github.com/docker/compose/releases/download/${compose_version}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    # Create symlink if needed
    if [ ! -f /usr/bin/docker-compose ]; then
        sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    fi
    
    echo -e "${GREEN}‚úÖ Docker Compose ${compose_version} installed successfully${NC}"
}

# Function to install NVIDIA Docker
install_nvidia_docker() {
    echo -e "${YELLOW}üîß Installing NVIDIA Docker runtime...${NC}"
    
    local distro=$(detect_distro)
    
    case $distro in
        "ubuntu"|"debian")
            # Add NVIDIA package repositories
            distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
            
            # Handle GPG key - don't prompt if it exists
            if [ ! -f /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg ]; then
                curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
            else
                echo -e "${BLUE}‚ÑπÔ∏è  NVIDIA GPG key already exists, skipping...${NC}"
            fi
            
            # Handle repository list - don't duplicate if it exists
            if [ ! -f /etc/apt/sources.list.d/nvidia-container-toolkit.list ]; then
                curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
                    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
                    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list > /dev/null
            else
                echo -e "${BLUE}‚ÑπÔ∏è  NVIDIA repository already configured, skipping...${NC}"
            fi
            
            # Update package index
            sudo apt-get update
            
            # Install NVIDIA Docker
            sudo apt-get install -y nvidia-docker2
            
            # Restart Docker daemon to load new runtime
            echo -e "${BLUE}üîÑ Restarting Docker to load NVIDIA runtime...${NC}"
            sudo systemctl restart docker
            
            echo -e "${GREEN}‚úÖ NVIDIA Docker runtime installed successfully${NC}"
            ;;
        "rhel"|"centos"|"fedora")
            # Add NVIDIA package repositories
            distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
            
            # Handle repository file - don't duplicate if it exists
            if [ ! -f /etc/yum.repos.d/nvidia-container-toolkit.repo ]; then
                curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/nvidia-container-toolkit.repo | \
                    sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo > /dev/null
            else
                echo -e "${BLUE}‚ÑπÔ∏è  NVIDIA repository already configured, skipping...${NC}"
            fi
            
            # Install NVIDIA Docker
            if command -v dnf &> /dev/null; then
                sudo dnf install -y nvidia-docker2
            else
                sudo yum install -y nvidia-docker2
            fi
            
            # Restart Docker daemon to load new runtime
            echo -e "${BLUE}üîÑ Restarting Docker to load NVIDIA runtime...${NC}"
            sudo systemctl restart docker
            
            echo -e "${GREEN}‚úÖ NVIDIA Docker runtime installed successfully${NC}"
            ;;
        *)
            echo -e "${RED}‚ùå Unsupported distribution for NVIDIA Docker: $distro${NC}"
            echo "Please install NVIDIA Docker manually: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html"
            exit 1
            ;;
    esac
}

# Function to ensure Docker is running
ensure_docker_running() {
    local command_name="${1:-}"
    
    # Check if Docker is running
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker is not running. Please start Docker first.${NC}"
        echo "Try: sudo systemctl start docker"
        exit 1
    fi
    
    # Check NVIDIA runtime only for commands that need it (skip for cleanup)
    if [[ "$command_name" != "cleanup" ]]; then
        # Check if nvidia-docker is available
        if ! docker run --rm --gpus all nvidia/cuda:11.0-base-ubuntu20.04 nvidia-smi > /dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  NVIDIA Docker runtime not available.${NC}"
            echo -e "${BLUE}‚ÑπÔ∏è  GPU drivers will be provided by the NVIDIA PyTorch container.${NC}"
            
            # Check if nvidia-docker2 package is installed but not working
            nvidia_docker_installed=false
            if command -v apt-get &> /dev/null && dpkg -l | grep -q nvidia-docker2; then
                nvidia_docker_installed=true
                echo -e "${BLUE}‚ÑπÔ∏è  nvidia-docker2 package found${NC}"
            elif (command -v yum &> /dev/null || command -v dnf &> /dev/null) && rpm -qa | grep -q nvidia-docker2; then
                nvidia_docker_installed=true
                echo -e "${BLUE}‚ÑπÔ∏è  nvidia-docker2 package found${NC}"
            fi
            
            if [ "$nvidia_docker_installed" = true ]; then
                echo -e "${YELLOW}üîß NVIDIA Docker package installed but not working. This could be due to:${NC}"
                echo "  ‚Ä¢ Docker daemon needs to reload configuration"
                echo "  ‚Ä¢ Missing NVIDIA drivers on host"
                echo "  ‚Ä¢ Docker runtime configuration issues"
                echo ""
                echo -e "${BLUE}üí° You can try:${NC}"
                echo "  ‚Ä¢ sudo systemctl reload docker    # Reload config without restart"
                echo "  ‚Ä¢ sudo systemctl restart docker   # Full restart if reload doesn't work"
                echo "  ‚Ä¢ nvidia-smi                      # Check if NVIDIA drivers are working"
                echo ""
                echo -e "${YELLOW}‚ö†Ô∏è  Continuing without NVIDIA runtime - GPU will work via container drivers${NC}"
            else
                echo -e "${BLUE}üì¶ Installing NVIDIA Docker runtime...${NC}"
                install_nvidia_docker
                echo -e "${BLUE}üîÑ NVIDIA Docker runtime installed.${NC}"
                
                # Test again after installation
                if docker run --rm --gpus all nvidia/cuda:11.0-base-ubuntu20.04 nvidia-smi > /dev/null 2>&1; then
                    echo -e "${GREEN}‚úÖ NVIDIA Docker runtime is now working${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  NVIDIA Docker runtime still not working after installation${NC}"
                    echo -e "${BLUE}‚ÑπÔ∏è  This is often due to missing NVIDIA drivers on the host${NC}"
                    echo -e "${BLUE}‚ÑπÔ∏è  GPU functionality will be provided by the container's NVIDIA PyTorch base image${NC}"
                fi
            fi
        else
            echo -e "${GREEN}‚úÖ NVIDIA Docker runtime already working${NC}"
        fi
        
        echo -e "${GREEN}‚úÖ Docker and NVIDIA runtime are available${NC}"
    else
        echo -e "${GREEN}‚úÖ Docker is running and ready for cleanup${NC}"
    fi
}

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Docker not found. Installing Docker...${NC}"
    install_docker
    echo -e "${BLUE}üîÑ Please run this script again after logging out and back in.${NC}"
    exit 0
fi

# Check if Docker Compose is available
if ! docker compose version &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose not found. Installing Docker Compose...${NC}"
    install_docker_compose
    
    # Verify installation worked
    if ! docker compose version &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose installation failed. Please install manually.${NC}"
        echo "Visit: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Docker Compose verified working${NC}"
fi

# Docker and NVIDIA runtime checks are now handled per-command in ensure_docker_running()

# Function to build Docker image when needed
build_image_if_needed() {
    echo -e "${YELLOW}üî® Building Docker image with uv...${NC}"
    docker compose build ai-learning
}

# Function to run training
run_training() {
    local epochs=${1:-10}
    local batch_size=${2:-64}
    
    build_image_if_needed
    
    echo -e "${BLUE}üöÄ Starting standard training with:${NC}"
    echo "  Epochs: $epochs"
    echo "  Batch size: $batch_size"
    
    docker compose run --rm ai-learning \
        uv run python -m src.encoding_101.01_vanilla_autoencoder train-ae \
        --max-epochs $epochs \
        --batch-size $batch_size
}

# Function to run NVTX profiling training
run_nvtx_training() {
    local epochs=${1:-5}
    local batch_size=${2:-256}
    local job_id=${3:-"training_profile"}
    local num_workers=${4:-2}
    
    build_image_if_needed
    
    echo -e "${YELLOW}üîç NVTX profiling training with:${NC}"
    echo "  Epochs: $epochs"
    echo "  Batch size: $batch_size"
    echo "  Job ID: $job_id"
    echo "  Workers: $num_workers"
    echo -e "${BLUE}üìÅ Output: ./profiling_output/${job_id}_${epochs}ep.nsys-rep${NC}"
    echo -e "${BLUE}üìä GPU metrics: Graphics, DRAM, NVLink, PCIe, SM, Tensor Core${NC}"
    
    docker compose run --rm profiling \
        nsys profile \
        --trace=nvtx,cuda,osrt,cublas,cudnn \
        --backtrace=dwarf \
        --sample=cpu \
        --cpuctxsw=process-tree \
        --force-overwrite=true \
        --cuda-memory-usage=true \
        --gpu-metrics-devices=all \
        --gpu-metrics-frequency=10000 \
        --gpu-metrics-set=gr,dram,nvl,pcie,sm,tensor \
        --wait=all \
        --delay=2 \
        --duration=300 \
        --output=/app/profiling_output/${job_id}_${epochs}ep \
        uv run scripts/profile_training.py profile \
        --max-epochs $epochs \
        --batch-size $batch_size \
        --num-workers $num_workers \
        --enable-nvtx
}



# Function to start TensorBoard
start_tensorboard() {
    build_image_if_needed
    
    echo -e "${BLUE}üìä Starting TensorBoard...${NC}"
    docker compose up -d tensorboard
    echo -e "${GREEN}‚úÖ TensorBoard running at http://localhost:6007${NC}"
}

# Function to run interactive shell
run_shell() {
    build_image_if_needed
    
    echo -e "${BLUE}üêö Starting interactive shell...${NC}"
    docker compose run --rm ai-learning bash
}



# Function to clean up Docker resources
docker_cleanup() {
    echo -e "${BLUE}üßπ Docker Cleanup${NC}"
    echo "=================="
    
    # Show current disk usage
    echo -e "${YELLOW}üìä Current Docker disk usage:${NC}"
    docker system df
    echo ""
    
    # Count dangling images
    local dangling_count=$(docker images --filter "dangling=true" -q | wc -l)
    echo -e "${BLUE}üîç Found $dangling_count dangling images (with <none> tag)${NC}"
    
    if [ "$dangling_count" -gt 0 ]; then
        echo -e "${YELLOW}üóëÔ∏è  Removing dangling images...${NC}"
        docker image prune -f
        echo -e "${GREEN}‚úÖ Removed dangling images${NC}"
    else
        echo -e "${GREEN}‚úÖ No dangling images found${NC}"
    fi
    
    echo ""
    
    # Clean up unused containers
    echo -e "${YELLOW}üóëÔ∏è  Removing stopped containers...${NC}"
    docker container prune -f
    
    # Clean up unused networks
    echo -e "${YELLOW}üóëÔ∏è  Removing unused networks...${NC}"
    docker network prune -f
    
    # Clean up unused volumes (be careful with this)
    local volume_count=$(docker volume ls -qf dangling=true | wc -l)
    if [ "$volume_count" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Found $volume_count unused volumes${NC}"
        echo -e "${BLUE}üí° To clean volumes: docker volume prune -f${NC}"
        echo -e "${BLUE}üí° (Not auto-cleaned to preserve data)${NC}"
    else
        echo -e "${GREEN}‚úÖ No unused volumes found${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}üìä Disk usage after cleanup:${NC}"
    docker system df
    
    echo ""
    echo -e "${GREEN}‚úÖ Docker cleanup complete!${NC}"
    echo -e "${BLUE}üí° For aggressive cleanup: docker system prune -a${NC}"
}

# Parse command line arguments
case "${1:-help}" in
    "train")
        ensure_docker_running "train"
        run_training "${2:-10}" "${3:-64}"
        ;;
    "train-nvtx")
        ensure_docker_running "train-nvtx"
        run_nvtx_training "${2:-5}" "${3:-256}" "${4:-training_profile}" "${5:-2}"
        ;;
    "tensorboard")
        ensure_docker_running "tensorboard"
        start_tensorboard
        ;;
    "shell")
        ensure_docker_running "shell"
        run_shell
        ;;
    "cleanup")
        ensure_docker_running "cleanup"
        docker_cleanup
        ;;
    "help"|*)
        echo -e "${BLUE}Usage: $0 [COMMAND] [OPTIONS]${NC}"
        echo ""
        echo "Commands:"
        echo "  train [epochs] [batch_size]               - Train vanilla autoencoder (default: 10 epochs, 64 batch)"
        echo "  train-nvtx [epochs] [batch_size] [job_id] [workers] - Train with NVTX profiling (default: 5 epochs, 256 batch, 2 workers)"
        echo "  tensorboard                               - Start TensorBoard service"
        echo "  shell                                     - Start interactive bash shell"
        echo "  cleanup                                   - Clean up Docker resources"
        echo "  help                                      - Show this help message"
        echo ""
        echo "Examples:"
        echo "  $0 train 20 128                          - Train for 20 epochs with batch size 128"
        echo "  $0 train-nvtx 5 256                      - NVTX profiling with 5 epochs, 256 batch size"
        echo "  $0 train-nvtx 3 512 gpu_experiment 4     - NVTX profiling with custom job ID and 4 workers"
        echo "  $0 tensorboard                           - Start TensorBoard on port 6007"
        echo "  $0 shell                                 - Interactive development shell"
        echo "  $0 cleanup                               - Remove dangling Docker images"
        echo ""
        echo "NVTX Profiling Features:"
        echo "  ‚Ä¢ Comprehensive GPU metrics (Graphics, DRAM, NVLink, PCIe, SM, Tensor Core)"
        echo "  ‚Ä¢ Epoch-level NVTX markers for clear timeline navigation"
        echo "  ‚Ä¢ CPU sampling and context switching tracking"
        echo "  ‚Ä¢ Output saved to ./profiling_output/[job_id]_[epochs]ep.nsys-rep"
        echo ""
        echo "Installation:"
        echo "  This script will automatically install Docker, Docker Compose, and NVIDIA Docker runtime"
        echo "  if they are not already installed on your system."
        ;;
esac
